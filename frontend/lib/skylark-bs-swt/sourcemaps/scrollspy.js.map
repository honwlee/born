{"version":3,"sources":["scrollspy.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","sbswt","ScrollSpy","WidgetBase","inherit","klassName","init","element","options","this","$body","document","body","$scrollElement","is","window","mixin","DEFAULTS","selector","target","offsets","targets","activeTarget","scrollHeight","on","proxy","process","refresh","getScrollHeight","Math","max","documentElement","that","offsetMethod","offsetBase","isWindow","scrollTop","find","map","$el","href","data","attr","$href","test","length","top","sort","a","b","each","push","i","offset","maxScroll","height","activate","clear","undefined","active","parents","addClass","parent","closest","trigger","parentsUntil","removeClass","VERSION","old","fn","scrollspy","option","$this","Constructor","noConflict"],"mappings":"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","file":"../scrollspy.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\",\n  \"./sbswt\"\n],function(langx,browser,eventer,noder,geom,velm,$,sbswt){\n\n/* ========================================================================\n * Bootstrap: scrollspy.js v3.3.7\n * http://getbootstrap.com/javascript/#scrollspy\n * ========================================================================\n * Copyright 2011-2016 Twitter, Inc.\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)\n * ======================================================================== */\n\n  'use strict';\n\n  // SCROLLSPY CLASS DEFINITION\n  // ==========================\n\n  var ScrollSpy = sbswt.ScrollSpy = sbswt.WidgetBase.inherit({\n    klassName: \"ScrollSpy\",\n\n    init : function(element,options) {\n      this.$body          = $(document.body)\n      this.$scrollElement = $(element).is(document.body) ? $(window) : $(element)\n      this.options        = langx.mixin({}, ScrollSpy.DEFAULTS, options)\n      this.selector       = (this.options.target || '') + ' .nav li > a'\n      this.offsets        = []\n      this.targets        = []\n      this.activeTarget   = null\n      this.scrollHeight   = 0\n\n      this.$scrollElement.on('scroll.bs.scrollspy', langx.proxy(this.process, this))\n      this.refresh()\n      this.process()\n    },\n\n    getScrollHeight : function () {\n      return this.$scrollElement[0].scrollHeight || Math.max(this.$body[0].scrollHeight, document.documentElement.scrollHeight)\n    },\n\n    refresh : function () {\n      var that          = this\n      var offsetMethod  = 'offset'\n      var offsetBase    = 0\n\n      this.offsets      = []\n      this.targets      = []\n      this.scrollHeight = this.getScrollHeight()\n\n      if (!langx.isWindow(this.$scrollElement[0])) {\n        offsetMethod = 'position'\n        offsetBase   = this.$scrollElement.scrollTop()\n      }\n\n      this.$body\n        .find(this.selector)\n        .map(function () {\n          var $el   = $(this)\n          var href  = $el.data('target') || $el.attr('href')\n          var $href = /^#./.test(href) && $(href)\n\n          return ($href\n            && $href.length\n            && $href.is(':visible')\n            && [[$href[offsetMethod]().top + offsetBase, href]]) || null\n        })\n        .sort(function (a, b) { return a[0] - b[0] })\n        .each(function () {\n          that.offsets.push(this[0])\n          that.targets.push(this[1])\n        })\n    },\n\n    process : function () {\n      var scrollTop    = this.$scrollElement.scrollTop() + this.options.offset\n      var scrollHeight = this.getScrollHeight()\n      var maxScroll    = this.options.offset + scrollHeight - this.$scrollElement.height()\n      var offsets      = this.offsets\n      var targets      = this.targets\n      var activeTarget = this.activeTarget\n      var i\n\n      if (this.scrollHeight != scrollHeight) {\n        this.refresh()\n      }\n\n      if (scrollTop >= maxScroll) {\n        return activeTarget != (i = targets[targets.length - 1]) && this.activate(i)\n      }\n\n      if (activeTarget && scrollTop < offsets[0]) {\n        this.activeTarget = null\n        return this.clear()\n      }\n\n      for (i = offsets.length; i--;) {\n        activeTarget != targets[i]\n          && scrollTop >= offsets[i]\n          && (offsets[i + 1] === undefined || scrollTop < offsets[i + 1])\n          && this.activate(targets[i])\n      }\n    },\n\n    activate : function (target) {\n      this.activeTarget = target\n\n      this.clear()\n\n      var selector = this.selector +\n        '[data-target=\"' + target + '\"],' +\n        this.selector + '[href=\"' + target + '\"]'\n\n      var active = $(selector)\n        .parents('li')\n        .addClass('active')\n\n      if (active.parent('.dropdown-menu').length) {\n        active = active\n          .closest('li.dropdown')\n          .addClass('active')\n      }\n\n      active.trigger('activate.bs.scrollspy')\n    },\n\n    clear : function () {\n      $(this.selector)\n        .parentsUntil(this.options.target, '.active')\n        .removeClass('active')\n    }\n\n  });\n\n  ScrollSpy.VERSION  = '3.3.7'\n\n  ScrollSpy.DEFAULTS = {\n    offset: 10\n  }\n\n  // SCROLLSPY PLUGIN DEFINITION\n  // ===========================\n  var old = $.fn.scrollspy;\n\n  $.fn.scrollspy = function scrollspy(option) {\n    return this.each(function () {\n      var $this   = $(this)\n      var data    = $this.data('bs.scrollspy')\n      var options = typeof option == 'object' && option\n\n      if (!data) $this.data('bs.scrollspy', (data = new ScrollSpy(this, options)))\n      if (typeof option == 'string') data[option]()\n    })\n  }\n\n\n  $.fn.scrollspy.Constructor = ScrollSpy;\n\n\n  // SCROLLSPY NO CONFLICT\n  // =====================\n\n  $.fn.scrollspy.noConflict = function () {\n    $.fn.scrollspy = old;\n    return this;\n  }\n\n\n  // SCROLLSPY DATA-API\n  // ==================\n  /*\n  $(window).on('load.bs.scrollspy.data-api', function () {\n    $('[data-spy=\"scroll\"]').each(function () {\n      var $spy = $(this)\n      Plugin.call($spy, $spy.data())\n    })\n  })\n  */\n\n  return $.fn.scrollspy;\n\n});\n"]}