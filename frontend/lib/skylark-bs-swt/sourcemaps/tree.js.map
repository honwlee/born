{"version":3,"sources":["tree.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","sbswt","styleNodeSelected","$element","$icon","addClass","data","hasClass","removeClass","styleNodeDeselected","multiSelectSyncNodes","self","clicked","selected","each","$elements","index","element","dataForEvent","push","eventType","elementData","singleSelectSyncNodes","deselectAll","old","fn","tree","Tree","WidgetBase","inherit","klassName","init","options","this","mixin","defaults","attr","itemSelect","on","proxy","ev","selectItem","currentTarget","toggleFolder","populate","folderSelect","off","parent","selectFolder","$tree","focusIn","e","navigateTree","render","n","nodes","$selectedElements","find","ariaDeselect","destroy","remove","outerHTML","$el","ibp","isOverflow","$parent","atRoot","treeData","overflow","isBackgroundProcess","replaceWith","$loader","dataSource","items","i","treeNode","nodeType","type","$entity","clone","removeData","removeAttr","html","text","name","attrs","dataAttributes","setTo","append","trigger","selectTreeNode","clickedElement","closest","ariaSelect","multiSelect","setFocus","target","item","discloseFolder","folder","$folder","$branch","$treeFolderContent","$treeFolderContentFirstChild","eq","disclosedCompleted","children","length","one","closeFolder","el","cacheItems","empty","selectedItems","$sel","value","collapse","reportedClosed","closedReported","event","closed","discloseVisible","$openableFolders","reportedOpened","openReported","opened","discloseAll","isExceededLimit","disclosuresUpperLimit","isAllDisclosed","disclosures","refreshFolder","$treeFolder","$treeFolderChildren","prototype","closeAll","openFolder","getValue","fixFocusability","$focusCandidate","focus","isDefaultPrevented","isPropagationStopped","targetNode","originalEvent","$targetNode","isOpen","handled","fireDoneImmediately","done","which","foldersSelectable","isFolder","isItem","$prev","prevAll","not","click","$next","nextAll","parents","$prevChildren","preventDefault","stopPropagation","option","methodReturn","args","Array","slice","call","arguments","$set","$this","apply","undefined","findChildData","targetParent","rootData","isRootOfTree","isEmptyObject","potentialMatch","id","foundChild","staticData","openedParentData","callback","childData","Constructor","noConflict"],"mappings":"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","file":"../tree.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\",\n  \"./sbswt\"\n],function(langx,browser,eventer,noder,geom,velm,$,sbswt){\n\n\n\t/*\n\t * Fuel UX Checkbox\n\t * https://github.com/ExactTarget/fuelux\n\t *\n\t * Copyright (c) 2014 ExactTarget\n\t * Licensed under the BSD New license.\n\t */\n\n\tvar old = $.fn.tree;\n\n\t// TREE CONSTRUCTOR AND PROTOTYPE\n\n\tvar Tree = sbswt.Tree = sbswt.WidgetBase.inherit({\n\t\tklassName: \"Tree\",\n\n\t\tinit : function(element,options) {\n\t\t\tthis.$element = $(element);\n\t\t\tthis.options = langx.mixin({}, $.fn.tree.defaults, options);\n\n\t\t\tthis.$element.attr('tabindex', '0');\n\n\t\t\tif (this.options.itemSelect) {\n\t\t\t\tthis.$element.on('click.fu.tree', '.tree-item', langx.proxy(function callSelect (ev) {\n\t\t\t\t\tthis.selectItem(ev.currentTarget);\n\t\t\t\t}, this));\n\t\t\t}\n\n\t\t\tthis.$element.on('click.fu.tree', '.tree-branch-name', langx.proxy(function callToggle (ev) {\n\t\t\t\tthis.toggleFolder(ev.currentTarget);\n\t\t\t}, this));\n\n\t\t\tthis.$element.on('click.fu.tree', '.tree-overflow', langx.proxy(function callPopulate (ev) {\n\t\t\t\tthis.populate($(ev.currentTarget));\n\t\t\t}, this));\n\n\t\t\t// folderSelect default is true\n\t\t\tif (this.options.folderSelect) {\n\t\t\t\tthis.$element.addClass('tree-folder-select');\n\t\t\t\tthis.$element.off('click.fu.tree', '.tree-branch-name');\n\t\t\t\tthis.$element.on('click.fu.tree', '.icon-caret', langx.proxy(function callToggle (ev) {\n\t\t\t\t\tthis.toggleFolder($(ev.currentTarget).parent());\n\t\t\t\t}, this));\n\t\t\t\tthis.$element.on('click.fu.tree', '.tree-branch-name', langx.proxy(function callSelect (ev) {\n\t\t\t\t\tthis.selectFolder($(ev.currentTarget));\n\t\t\t\t}, this));\n\t\t\t}\n\n\t\t\tthis.$element.on('focus', function setFocusOnTab () {\n\t\t\t\tvar $tree = $(this);\n\t\t\t\tfocusIn($tree, $tree);\n\t\t\t});\n\n\t\t\tthis.$element.on('keydown', function processKeypress (e) {\n\t\t\t\treturn navigateTree($(this), e);\n\t\t\t});\n\n\t\t\tthis.render();\n\t\t},\n\t\tdeselectAll: function deselectAll(n) {\n\t\t\t// clear all child tree nodes and style as deselected\n\t\t\tvar nodes = n || this.$element;\n\t\t\tvar $selectedElements = $(nodes).find('.tree-selected');\n\t\t\t$selectedElements.each(function callStyleNodeDeselected (index, element) {\n\t\t\t\tvar $element = $(element);\n\t\t\t\tariaDeselect($element);\n\t\t\t\tstyleNodeDeselected( $element, $element.find( '.glyphicon' ) );\n\t\t\t});\n\t\t\treturn $selectedElements;\n\t\t},\n\n\t\tdestroy: function destroy() {\n\t\t\t// any external bindings [none]\n\t\t\t// empty elements to return to original markup\n\t\t\tthis.$element.find('li:not([data-template])').remove();\n\n\t\t\tthis.$element.remove();\n\t\t\t// returns string of markup\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\trender: function render() {\n\t\t\tthis.populate(this.$element);\n\t\t},\n\n\t\tpopulate: function populate($el, ibp) {\n\t\t\tvar self = this;\n\n\t\t\t// populate was initiated based on clicking overflow link\n\t\t\tvar isOverflow = $el.hasClass('tree-overflow');\n\n\t\t\tvar $parent = ($el.hasClass('tree')) ? $el : $el.parent();\n\t\t\tvar atRoot = $parent.hasClass('tree');\n\n\t\t\tif (isOverflow && !atRoot) {\n\t\t\t\t$parent = $parent.parent();\n\t\t\t}\n\n\t\t\tvar treeData = $parent.data();\n\t\t\t// expose overflow data to datasource so it can be responded to appropriately.\n\t\t\tif (isOverflow) {\n\t\t\t\ttreeData.overflow = $el.data();\n\t\t\t}\n\n\t\t\tvar isBackgroundProcess = ibp || false;\t// no user affordance needed (ex.- \"loading\")\n\n\t\t\tif (isOverflow) {\n\t\t\t\tif (atRoot) {\n\t\t\t\t\t// the loader at the root level needs to continually replace the overflow trigger\n\t\t\t\t\t// otherwise, when loader is shown below, it will be the loader for the last folder\n\t\t\t\t\t// in the tree, instead of the loader at the root level.\n\t\t\t\t\t$el.replaceWith($parent.find('> .tree-loader').remove());\n\t\t\t\t} else {\n\t\t\t\t\t$el.remove();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tvar $loader = $parent.find('.tree-loader:last');\n\n\t\t\tif (isBackgroundProcess === false) {\n\t\t\t\t$loader.removeClass('hide hidden'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\n\t\t\t}\n\n\t\t\tthis.options.dataSource(treeData ? treeData : {}, function populateNodes (items) {\n\t\t\t\tlangx.each(items.data, function buildNode (i, treeNode) {\n\t\t\t\t\tvar nodeType = treeNode.type;\n\n\t\t\t\t\t// 'item' and 'overflow' remain consistent, but 'folder' maps to 'branch'\n\t\t\t\t\tif (treeNode.type === 'folder') {\n\t\t\t\t\t\tnodeType = 'branch';\n\t\t\t\t\t}\n\n\t\t\t\t\tvar $entity = self.$element\n\t\t\t\t\t\t.find('[data-template=tree' + nodeType + ']:eq(0)')\n\t\t\t\t\t\t.clone()\n\t\t\t\t\t\t.removeClass('hide hidden')// jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\n\t\t\t\t\t\t.removeData('template')\n\t\t\t\t\t\t.removeAttr('data-template');\n\t\t\t\t\t$entity.find('.tree-' + nodeType + '-name > .tree-label').html(treeNode.text || treeNode.name);\n\t\t\t\t\t$entity.data(treeNode);\n\n\n\t\t\t\t\t// Decorate $entity with data or other attributes making the\n\t\t\t\t\t// element easily accessible with libraries like jQuery.\n\t\t\t\t\t//\n\t\t\t\t\t// Values are contained within the object returned\n\t\t\t\t\t// for folders and items as attr:\n\t\t\t\t\t//\n\t\t\t\t\t// {\n\t\t\t\t\t//     text: \"An Item\",\n\t\t\t\t\t//     type: 'item',\n\t\t\t\t\t//     attr = {\n\t\t\t\t\t//         'classes': 'required-item red-text',\n\t\t\t\t\t//         'data-parent': parentId,\n\t\t\t\t\t//         'guid': guid,\n\t\t\t\t\t//         'id': guid\n\t\t\t\t\t//     }\n\t\t\t\t\t// };\n\t\t\t\t\t//\n\t\t\t\t\t// the \"name\" attribute is also supported but is deprecated for \"text\".\n\n\t\t\t\t\t// add attributes to tree-branch or tree-item\n\t\t\t\t\tvar attrs = treeNode.attr || treeNode.dataAttributes || [];\n\t\t\t\t\tlangx.each(attrs, function setAttribute (attr, setTo) {\n\t\t\t\t\t\tswitch (attr) {\n\t\t\t\t\t\tcase 'cssClass':\n\t\t\t\t\t\tcase 'class':\n\t\t\t\t\t\tcase 'className':\n\t\t\t\t\t\t\t$entity.addClass(setTo);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// allow custom icons\n\t\t\t\t\t\tcase 'data-icon':\n\t\t\t\t\t\t\t$entity.find('.icon-item').removeClass().addClass('icon-item ' + setTo);\n\t\t\t\t\t\t\t$entity.attr(attr, setTo);\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// ARIA support\n\t\t\t\t\t\tcase 'id':\n\t\t\t\t\t\t\t$entity.attr(attr, setTo);\n\t\t\t\t\t\t\t$entity.attr('aria-labelledby', setTo + '-label');\n\t\t\t\t\t\t\t$entity.find('.tree-branch-name > .tree-label').attr('id', setTo + '-label');\n\t\t\t\t\t\t\tbreak;\n\n\t\t\t\t\t\t// style, data-*\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t$entity.attr(attr, setTo);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// add child node\n\t\t\t\t\tif (atRoot) {\n\t\t\t\t\t\t// For accessibility reasons, the root element is the only tab-able element (see https://github.com/ExactTarget/fuelux/issues/1964)\n\t\t\t\t\t\t$parent.append($entity);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$parent.find('.tree-branch-children:eq(0)').append($entity);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t$parent.find('.tree-loader').addClass('hidden');\n\t\t\t\t// return newly populated folder\n\t\t\t\tself.$element.trigger('loaded.fu.tree', $parent);\n\t\t\t});\n\t\t},\n\n\t\tselectTreeNode: function selectItem(clickedElement, nodeType) {\n\t\t\tvar clicked = {};\t// object for clicked element\n\t\t\tclicked.$element = $(clickedElement);\n\n\t\t\tvar selected = {}; // object for selected elements\n\t\t\tselected.$elements = this.$element.find('.tree-selected');\n\t\t\tselected.dataForEvent = [];\n\n\t\t\t// determine clicked element and it's icon\n\t\t\tif (nodeType === 'folder') {\n\t\t\t\t// make the clicked.$element the container branch\n\t\t\t\tclicked.$element = clicked.$element.closest('.tree-branch');\n\t\t\t\tclicked.$icon = clicked.$element.find('.icon-folder');\n\t\t\t} else {\n\t\t\t\tclicked.$icon = clicked.$element.find('.icon-item');\n\t\t\t}\n\t\t\tclicked.elementData = clicked.$element.data();\n\n\t\t\tariaSelect(clicked.$element);\n\n\t\t\t// the below functions pass objects by copy/reference and use modified object in this function\n\t\t\tif ( this.options.multiSelect ) {\n\t\t\t\tselected = multiSelectSyncNodes(this, clicked, selected);\n\t\t\t} else {\n\t\t\t\tselected = singleSelectSyncNodes(this, clicked, selected);\n\t\t\t}\n\n\t\t\tsetFocus(this.$element, clicked.$element);\n\n\t\t\t// all done with the DOM, now fire events\n\t\t\tthis.$element.trigger(selected.eventType + '.fu.tree', {\n\t\t\t\ttarget: clicked.elementData,\n\t\t\t\tselected: selected.dataForEvent\n\t\t\t});\n\n\t\t\tclicked.$element.trigger('updated.fu.tree', {\n\t\t\t\tselected: selected.dataForEvent,\n\t\t\t\titem: clicked.$element,\n\t\t\t\teventType: selected.eventType\n\t\t\t});\n\t\t},\n\n\t\tdiscloseFolder: function discloseFolder(folder) {\n\t\t\tvar $folder = $(folder);\n\n\t\t\tvar $branch = $folder.closest('.tree-branch');\n\t\t\tvar $treeFolderContent = $branch.find('.tree-branch-children');\n\t\t\tvar $treeFolderContentFirstChild = $treeFolderContent.eq(0);\n\n\t\t\t// take care of the styles\n\t\t\t$branch.addClass('tree-open');\n\t\t\t$branch.attr('aria-expanded', 'true');\n\t\t\t$treeFolderContentFirstChild.removeClass('hide hidden'); // jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\n\t\t\t$branch.find('> .tree-branch-header .icon-folder').eq(0)\n\t\t\t\t.removeClass('glyphicon-folder-close')\n\t\t\t\t.addClass('glyphicon-folder-open');\n\n\t\t\tvar $tree = this.$element;\n\t\t\tvar disclosedCompleted = function disclosedCompleted () {\n\t\t\t\t$tree.trigger('disclosedFolder.fu.tree', $branch.data());\n\t\t\t};\n\n\t\t\t// add the children to the folder\n\t\t\tif (!$treeFolderContent.children().length) {\n\t\t\t\t$tree.one('loaded.fu.tree', disclosedCompleted);\n\t\t\t\tthis.populate($treeFolderContent);\n\t\t\t} else {\n\t\t\t\tdisclosedCompleted();\n\t\t\t}\n\t\t},\n\n\t\tcloseFolder: function closeFolder(el) {\n\t\t\tvar $el = $(el);\n\t\t\tvar $branch = $el.closest('.tree-branch');\n\t\t\tvar $treeFolderContent = $branch.find('.tree-branch-children');\n\t\t\tvar $treeFolderContentFirstChild = $treeFolderContent.eq(0);\n\n\t\t\t// take care of the styles\n\t\t\t$branch.removeClass('tree-open');\n\t\t\t$branch.attr('aria-expanded', 'false');\n\t\t\t$treeFolderContentFirstChild.addClass('hidden');\n\t\t\t$branch.find('> .tree-branch-header .icon-folder').eq(0)\n\t\t\t\t.removeClass('glyphicon-folder-open')\n\t\t\t\t.addClass('glyphicon-folder-close');\n\n\t\t\t// remove chidren if no cache\n\t\t\tif (!this.options.cacheItems) {\n\t\t\t\t$treeFolderContentFirstChild.empty();\n\t\t\t}\n\n\t\t\tthis.$element.trigger('closed.fu.tree', $branch.data());\n\t\t},\n\n\t\ttoggleFolder: function toggleFolder(el) {\n\t\t\tvar $el = $(el);\n\n\t\t\tif ($el.find('.glyphicon-folder-close').length) {\n\t\t\t\tthis.discloseFolder(el);\n\t\t\t} else if ($el.find('.glyphicon-folder-open').length) {\n\t\t\t\tthis.closeFolder(el);\n\t\t\t}\n\t\t},\n\n\t\tselectFolder: function selectFolder(el) {\n\t\t\tif (this.options.folderSelect) {\n\t\t\t\tthis.selectTreeNode(el, 'folder');\n\t\t\t}\n\t\t},\n\n\t\tselectItem: function selectItem(el) {\n\t\t\tif (this.options.itemSelect) {\n\t\t\t\tthis.selectTreeNode(el, 'item');\n\t\t\t}\n\t\t},\n\n\t\tselectedItems: function selectedItems() {\n\t\t\tvar $sel = this.$element.find('.tree-selected');\n\t\t\tvar selected = [];\n\n\t\t\tlangx.each($sel, function buildSelectedArray (i, value) {\n\t\t\t\tselected.push($(value).data());\n\t\t\t});\n\t\t\treturn selected;\n\t\t},\n\n\t\t// collapses open folders\n\t\tcollapse: function collapse() {\n\t\t\tvar self = this;\n\t\t\tvar reportedClosed = [];\n\n\t\t\tvar closedReported = function closedReported(event, closed) {\n\t\t\t\treportedClosed.push(closed);\n\n\t\t\t\t// jQuery deprecated hide in 3.0. Use hidden instead. Leaving hide here to support previous markup\n\t\t\t\tif (self.$element.find(\".tree-branch.tree-open:not('.hidden, .hide')\").length === 0) {\n\t\t\t\t\tself.$element.trigger('closedAll.fu.tree', {\n\t\t\t\t\t\ttree: self.$element,\n\t\t\t\t\t\treportedClosed: reportedClosed\n\t\t\t\t\t});\n\t\t\t\t\tself.$element.off('loaded.fu.tree', self.$element, closedReported);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// trigger callback when all folders have reported closed\n\t\t\tself.$element.on('closed.fu.tree', closedReported);\n\n\t\t\tself.$element.find(\".tree-branch.tree-open:not('.hidden, .hide')\").each(function closeFolder () {\n\t\t\t\tself.closeFolder(this);\n\t\t\t});\n\t\t},\n\n\t\t// disclose visible will only disclose visible tree folders\n\t\tdiscloseVisible: function discloseVisible() {\n\t\t\tvar self = this;\n\n\t\t\tvar $openableFolders = self.$element.find(\".tree-branch:not('.tree-open, .hidden, .hide')\");\n\t\t\tvar reportedOpened = [];\n\n\t\t\tvar openReported = function openReported(event, opened) {\n\t\t\t\treportedOpened.push(opened);\n\n\t\t\t\tif (reportedOpened.length === $openableFolders.length) {\n\t\t\t\t\tself.$element.trigger('disclosedVisible.fu.tree', {\n\t\t\t\t\t\ttree: self.$element,\n\t\t\t\t\t\treportedOpened: reportedOpened\n\t\t\t\t\t});\n\t\t\t\t\t/*\n\t\t\t\t\t* Unbind the `openReported` event. `discloseAll` may be running and we want to reset this\n\t\t\t\t\t* method for the next iteration.\n\t\t\t\t\t*/\n\t\t\t\t\tself.$element.off('loaded.fu.tree', self.$element, openReported);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\t// trigger callback when all folders have reported opened\n\t\t\tself.$element.on('loaded.fu.tree', openReported);\n\n\t\t\t// open all visible folders\n\t\t\tself.$element.find(\".tree-branch:not('.tree-open, .hidden, .hide')\").each(function triggerOpen() {\n\t\t\t\tself.discloseFolder($(this).find('.tree-branch-header'));\n\t\t\t});\n\t\t},\n\n\t\t/*\n\t\t* Disclose all will keep listening for `loaded.fu.tree` and if `$(tree-el).data('ignore-disclosures-limit')`\n\t\t* is `true` (defaults to `true`) it will attempt to disclose any new closed folders than were\n\t\t* loaded in during the last disclosure.\n\t\t*/\n\t\tdiscloseAll: function discloseAll() {\n\t\t\tvar self = this;\n\n\t\t\t// first time\n\t\t\tif (typeof self.$element.data('disclosures') === 'undefined') {\n\t\t\t\tself.$element.data('disclosures', 0);\n\t\t\t}\n\n\t\t\tvar isExceededLimit = (self.options.disclosuresUpperLimit >= 1 && self.$element.data('disclosures') >= self.options.disclosuresUpperLimit);\n\t\t\tvar isAllDisclosed = self.$element.find(\".tree-branch:not('.tree-open, .hidden, .hide')\").length === 0;\n\n\n\t\t\tif (!isAllDisclosed) {\n\t\t\t\tif (isExceededLimit) {\n\t\t\t\t\tself.$element.trigger('exceededDisclosuresLimit.fu.tree', {\n\t\t\t\t\t\ttree: self.$element,\n\t\t\t\t\t\tdisclosures: self.$element.data('disclosures')\n\t\t\t\t\t});\n\n\t\t\t\t\t/*\n\t\t\t\t\t* If you've exceeded the limit, the loop will be killed unless you\n\t\t\t\t\t* explicitly ignore the limit and start the loop again:\n\t\t\t\t\t*\n\t\t\t\t\t*    $tree.one('exceededDisclosuresLimit.fu.tree', function () {\n\t\t\t\t\t*        $tree.data('ignore-disclosures-limit', true);\n\t\t\t\t\t*        $tree.tree('discloseAll');\n\t\t\t\t\t*    });\n\t\t\t\t\t*/\n\t\t\t\t\tif (!self.$element.data('ignore-disclosures-limit')) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tself.$element.data('disclosures', self.$element.data('disclosures') + 1);\n\n\t\t\t\t/*\n\t\t\t\t* A new branch that is closed might be loaded in, make sure those get handled too.\n\t\t\t\t* This attachment needs to occur before calling `discloseVisible` to make sure that\n\t\t\t\t* if the execution of `discloseVisible` happens _super fast_ (as it does in our QUnit tests\n\t\t\t\t* this will still be called. However, make sure this only gets called _once_, because\n\t\t\t\t* otherwise, every single time we go through this loop, _another_ event will be bound\n\t\t\t\t* and then when the trigger happens, this will fire N times, where N equals the number\n\t\t\t\t* of recursive `discloseAll` executions (instead of just one)\n\t\t\t\t*/\n\t\t\t\tself.$element.one('disclosedVisible.fu.tree', function callDiscloseAll () {\n\t\t\t\t\tself.discloseAll();\n\t\t\t\t});\n\n\t\t\t\t/*\n\t\t\t\t* If the page is very fast, calling this first will cause `disclosedVisible.fu.tree` to not\n\t\t\t\t* be bound in time to be called, so, we need to call this last so that the things bound\n\t\t\t\t* and triggered above can have time to take place before the next execution of the\n\t\t\t\t* `discloseAll` method.\n\t\t\t\t*/\n\t\t\t\tself.discloseVisible();\n\t\t\t} else {\n\t\t\t\tself.$element.trigger('disclosedAll.fu.tree', {\n\t\t\t\t\ttree: self.$element,\n\t\t\t\t\tdisclosures: self.$element.data('disclosures')\n\t\t\t\t});\n\n\t\t\t\t// if `cacheItems` is false, and they call closeAll, the data is trashed and therefore\n\t\t\t\t// disclosures needs to accurately reflect that\n\t\t\t\tif (!self.options.cacheItems) {\n\t\t\t\t\tself.$element.one('closeAll.fu.tree', function updateDisclosuresData () {\n\t\t\t\t\t\tself.$element.data('disclosures', 0);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// This refreshes the children of a folder. Please destroy and re-initilize for \"root level\" refresh.\n\t\t// The data of the refreshed folder is not updated. This control's architecture only allows updating of children.\n\t\t// Folder renames should probably be handled directly on the node.\n\t\trefreshFolder: function refreshFolder($el) {\n\t\t\tvar $treeFolder = $el.closest('.tree-branch');\n\t\t\tvar $treeFolderChildren = $treeFolder.find('.tree-branch-children');\n\t\t\t$treeFolderChildren.eq(0).empty();\n\n\t\t\tif ($treeFolder.hasClass('tree-open')) {\n\t\t\t\tthis.populate($treeFolderChildren, false);\n\t\t\t} else {\n\t\t\t\tthis.populate($treeFolderChildren, true);\n\t\t\t}\n\n\t\t\tthis.$element.trigger('refreshedFolder.fu.tree', $treeFolder.data());\n\t\t}\n\t});\n\n\t// ALIASES\n\n\t// alias for collapse for consistency. \"Collapse\" is an ambiguous term (collapse what? All? One specific branch?)\n\tTree.prototype.closeAll = Tree.prototype.collapse;\n\t// alias for backwards compatibility because there's no reason not to.\n\tTree.prototype.openFolder = Tree.prototype.discloseFolder;\n\t// For library consistency\n\tTree.prototype.getValue = Tree.prototype.selectedItems;\n\n\t// PRIVATE FUNCTIONS\n\n\tvar fixFocusability = function fixFocusability ($tree, $branch) {\n\t\t/*\n\t\tWhen tree initializes on page, the `<ul>` element should have tabindex=0 and all sub-elements should have\n\t\ttabindex=-1. When focus leaves the tree, whatever the last focused on element was will keep the tabindex=0. The\n\t\ttree itself will have a tabindex=-1. The reason for this is that if you are inside of the tree and press\n\t\tshift+tab, it will try and focus on the tree you are already in, which will cause focus to shift immediately\n\t\tback to the element you are already focused on. That will make it seem like the event is getting \"Swallowed up\"\n\t\tby an aggressive event listener trap.\n\n\t\tFor this reason, only one element in the entire tree, including the tree itself, should ever have tabindex=0.\n\t\tIf somewhere down the line problems are being caused by this, the only further potential improvement I can\n\t\tenvision at this time is listening for the tree to lose focus and reseting the tabindexes of all children to -1\n\t\tand setting the tabindex of the tree itself back to 0. This seems overly complicated with no benefit that I can\n\t\timagine at this time, so instead I am leaving the last focused element with the tabindex of 0, even upon blur of\n\t\tthe tree.\n\n\t\tOne benefit to leaving the last focused element in a tree with a tabindex=0 is that if you accidentally tab out\n\t\tof the tree and then want to tab back in, you will be placed exactly where you left off instead of at the\n\t\tbeginning of the tree.\n\t\t*/\n\t\t$tree.attr('tabindex', -1);\n\t\t$tree.find('li').attr('tabindex', -1);\n\t\tif ($branch && $branch.length > 0) {\n\t\t\t$branch.attr('tabindex', 0); // if tabindex is not set to 0 (or greater), node is not able to receive focus\n\t\t}\n\t};\n\n\t// focuses into (onto one of the children of) the provided branch\n\tvar focusIn = function focusIn ($tree, $branch) {\n\t\tvar $focusCandidate = $branch.find('.tree-selected:first');\n\n\t\t// if no node is selected, set focus to first visible node\n\t\tif ($focusCandidate.length <= 0) {\n\t\t\t$focusCandidate = $branch.find('li:not(\".hidden\"):first');\n\t\t}\n\n\t\tsetFocus($tree, $focusCandidate);\n\t};\n\n\t// focuses on provided branch\n\tvar setFocus = function setFocus ($tree, $branch) {\n\t\tfixFocusability($tree, $branch);\n\n\t\t$tree.attr('aria-activedescendant', $branch.attr('id'));\n\n\t\t$branch.focus();\n\n\t\t$tree.trigger('setFocus.fu.tree', $branch);\n\t};\n\n\tvar navigateTree = function navigateTree ($tree, e) {\n\t\tif (e.isDefaultPrevented() || e.isPropagationStopped()) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar targetNode = e.originalEvent.target;\n\t\tvar $targetNode = $(targetNode);\n\t\tvar isOpen = $targetNode.hasClass('tree-open');\n\t\tvar handled = false;\n\t\t// because es5 lacks promises and fuelux has no polyfil (and I'm not adding one just for this change)\n\t\t// I am faking up promises here through callbacks and listeners. Done will be fired immediately at the end of\n\t\t// the navigateTree method if there is no (fake) promise, but will be fired by an event listener that will\n\t\t// be triggered by another function if necessary. This way when done runs, and fires keyboardNavigated.fu.tree\n\t\t// anything listening for that event can be sure that everything tied to that event is actually completed.\n\t\tvar fireDoneImmediately = true;\n\t\tvar done = function done () {\n\t\t\t$tree.trigger('keyboardNavigated.fu.tree', e, $targetNode);\n\t\t};\n\n\t\tswitch (e.which) {\n\t\tcase 13: // enter\n\t\tcase 32: // space\n\t\t\t// activates a node, i.e., performs its default action.\n\t\t\t// For parent nodes, one possible default action is to open or close the node.\n\t\t\t// In single-select trees where selection does not follow focus, the default action is typically to select the focused node.\n\t\t\tvar foldersSelectable = $tree.hasClass('tree-folder-select');\n\t\t\tvar isFolder = $targetNode.hasClass('tree-branch');\n\t\t\tvar isItem = $targetNode.hasClass('tree-item');\n\t\t\t// var isOverflow = $targetNode.hasClass('tree-overflow');\n\n\t\t\tfireDoneImmediately = false;\n\t\t\tif (isFolder) {\n\t\t\t\tif (foldersSelectable) {\n\t\t\t\t\t$tree.one('selected.fu.tree deselected.fu.tree', done);\n\t\t\t\t\t$tree.tree('selectFolder', $targetNode.find('.tree-branch-header')[0]);\n\t\t\t\t} else {\n\t\t\t\t\t$tree.one('loaded.fu.tree closed.fu.tree', done);\n\t\t\t\t\t$tree.tree('toggleFolder', $targetNode.find('.tree-branch-header')[0]);\n\t\t\t\t}\n\t\t\t} else if (isItem) {\n\t\t\t\t$tree.one('selected.fu.tree', done);\n\t\t\t\t$tree.tree('selectItem', $targetNode);\n\t\t\t} else {\n\t\t\t\t// should be isOverflow... Try and click on it either way.\n\t\t\t\t$prev = $($targetNode.prevAll().not('.hidden')[0]);\n\t\t\t\t$targetNode.click();\n\n\t\t\t\t$tree.one('loaded.fu.tree', function selectFirstNewlyLoadedNode () {\n\t\t\t\t\t$next = $($prev.nextAll().not('.hidden')[0]);\n\n\t\t\t\t\tsetFocus($tree, $next);\n\t\t\t\t\tdone();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\t\tcase 35: // end\n\t\t\t// Set focus to the last node in the tree that is focusable without opening a node.\n\t\t\tsetFocus($tree, $tree.find('li:not(\".hidden\"):last'));\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\t\tcase 36: // home\n\t\t\t// set focus to the first node in the tree without opening or closing a node.\n\t\t\tsetFocus($tree, $tree.find('li:not(\".hidden\"):first'));\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\t\tcase 37: // left\n\t\t\tif (isOpen) {\n\t\t\t\tfireDoneImmediately = false;\n\t\t\t\t$tree.one('closed.fu.tree', done);\n\t\t\t\t$tree.tree('closeFolder', targetNode);\n\t\t\t} else {\n\t\t\t\tsetFocus($tree, $($targetNode.parents('li')[0]));\n\t\t\t}\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\n\t\tcase 38: // up\n\t\t\t// move focus to previous sibling\n\t\t\tvar $prev = [];\n\t\t\t// move to previous li not hidden\n\t\t\t$prev = $($targetNode.prevAll().not('.hidden')[0]);\n\n\t\t\t// if the previous li is open, and has children, move selection to its last child so selection\n\t\t\t// appears to move to the next \"thing\" up\n\t\t\tif ($prev.hasClass('tree-open')) {\n\t\t\t\tvar $prevChildren = $prev.find('li:not(\".hidden\"):last');\n\t\t\t\tif ($prevChildren.length > 0) {\n\t\t\t\t\t$prev = $($prevChildren[0]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// if nothing has been selected, we are presumably at the top of an open li, select the immediate parent\n\t\t\tif ($prev.length < 1) {\n\t\t\t\t$prev = $($targetNode.parents('li')[0]);\n\t\t\t}\n\t\t\tsetFocus($tree, $prev);\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\n\t\tcase 39: // right\n\t\t\tif (isOpen) {\n\t\t\t\tfocusIn($tree, $targetNode);\n\t\t\t} else {\n\t\t\t\tfireDoneImmediately = false;\n\t\t\t\t$tree.one('disclosed.fu.tree', done);\n\t\t\t\t$tree.tree('discloseFolder', targetNode);\n\t\t\t}\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\n\t\tcase 40: // down\n\t\t\t// move focus to next selectable tree node\n\t\t\tvar $next = $($targetNode.find('li:not(\".hidden\"):first')[0]);\n\t\t\tif (!isOpen || $next.length <= 0) {\n\t\t\t\t$next = $($targetNode.nextAll().not('.hidden')[0]);\n\t\t\t}\n\n\t\t\tif ($next.length < 1) {\n\t\t\t\t$next = $($($targetNode.parents('li')[0]).nextAll().not('.hidden')[0]);\n\t\t\t}\n\t\t\tsetFocus($tree, $next);\n\n\t\t\thandled = true;\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t// console.log(e.which);\n\t\t\treturn true; // exit this handler for other keys\n\t\t}\n\n\t\t// if we didn't handle the event, allow propagation to continue so something else might.\n\t\tif (handled) {\n\t\t\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\tif (fireDoneImmediately) {\n\t\t\t\tdone();\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t};\n\n\tvar ariaSelect = function ariaSelect ($element) {\n\t\t$element.attr('aria-selected', true);\n\t};\n\n\tvar ariaDeselect = function ariaDeselect ($element) {\n\t\t$element.attr('aria-selected', false);\n\t};\n\n\tfunction styleNodeSelected ($element, $icon) {\n\t\t$element.addClass('tree-selected');\n\t\tif ( $element.data('type') === 'item' && $icon.hasClass('fueluxicon-bullet') ) {\n\t\t\t$icon.removeClass('fueluxicon-bullet').addClass('glyphicon-ok'); // make checkmark\n\t\t}\n\t}\n\n\tfunction styleNodeDeselected ($element, $icon) {\n\t\t$element.removeClass('tree-selected');\n\t\tif ( $element.data('type') === 'item' && $icon.hasClass('glyphicon-ok') ) {\n\t\t\t$icon.removeClass('glyphicon-ok').addClass('fueluxicon-bullet'); // make bullet\n\t\t}\n\t}\n\n\tfunction multiSelectSyncNodes (self, clicked, selected) {\n\t\t// search for currently selected and add to selected data list if needed\n\t\tlangx.each(selected.$elements, function findCurrentlySelected (index, element) {\n\t\t\tvar $element = $(element);\n\n\t\t\tif ($element[0] !== clicked.$element[0]) {\n\t\t\t\tselected.dataForEvent.push( $($element).data() );\n\t\t\t}\n\t\t});\n\n\t\tif (clicked.$element.hasClass('tree-selected')) {\n\t\t\tstyleNodeDeselected(clicked.$element, clicked.$icon);\n\t\t\t// set event data\n\t\t\tselected.eventType = 'deselected';\n\t\t} else {\n\t\t\tstyleNodeSelected(clicked.$element, clicked.$icon);\n\t\t\t// set event data\n\t\t\tselected.eventType = 'selected';\n\t\t\tselected.dataForEvent.push(clicked.elementData);\n\t\t}\n\n\t\treturn selected;\n\t}\n\n\tfunction singleSelectSyncNodes(self, clicked, selected) {\n\t\t// element is not currently selected\n\t\tif (selected.$elements[0] !== clicked.$element[0]) {\n\t\t\tself.deselectAll(self.$element);\n\t\t\tstyleNodeSelected(clicked.$element, clicked.$icon);\n\t\t\t// set event data\n\t\t\tselected.eventType = 'selected';\n\t\t\tselected.dataForEvent = [clicked.elementData];\n\t\t} else {\n\t\t\tstyleNodeDeselected(clicked.$element, clicked.$icon);\n\t\t\t// set event data\n\t\t\tselected.eventType = 'deselected';\n\t\t\tselected.dataForEvent = [];\n\t\t}\n\n\t\treturn selected;\n\t}\n\n\t// TREE PLUGIN DEFINITION\n\n\t$.fn.tree = function fntree (option) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tvar methodReturn;\n\n\t\tvar $set = this.each(function eachThis () {\n\t\t\tvar $this = $(this);\n\t\t\tvar data = $this.data('fu.tree');\n\t\t\tvar options = typeof option === 'object' && option;\n\n\t\t\tif (!data) {\n\t\t\t\t$this.data('fu.tree', (data = new Tree(this, options)));\n\t\t\t\t$this.trigger('initialized.fu.tree');\n\t\t\t}\n\n\t\t\tif (typeof option === 'string') {\n\t\t\t\tmethodReturn = data[option].apply(data, args);\n\t\t\t}\n\t\t});\n\n\t\treturn (methodReturn === undefined) ? $set : methodReturn;\n\t};\n\n\t/*\n\t * Private method used only by the default dataSource for the tree, which is used to consume static\n\t * tree data.\n\t *\n\t * Find children of supplied parent in rootData. You can pass in an entire deeply nested tree\n\t * and this will look through it recursively until it finds the child data you are looking for.\n\t *\n\t * For extremely large trees, this could cause the browser to crash, as there is no protection\n\t * or limit on the amount of branches that will be searched through.\n\t */\n\tvar findChildData = function findChildData (targetParent, rootData) {\n\t\tvar isRootOfTree = $.isEmptyObject(targetParent);\n\t\tif (isRootOfTree) {\n\t\t\treturn rootData;\n\t\t}\n\n\t\tif (rootData === undefined) {\n\t\t\treturn false;\n\t\t}\n\n\t\tfor (var i = 0; i < rootData.length; i++) {\n\t\t\tvar potentialMatch = rootData[i];\n\n\t\t\tif (potentialMatch.attr && targetParent.attr && potentialMatch.attr.id === targetParent.attr.id) {\n\t\t\t\treturn potentialMatch.children;\n\t\t\t} else if (potentialMatch.children) {\n\t\t\t\tvar foundChild = findChildData(targetParent, potentialMatch.children);\n\t\t\t\tif (foundChild) {\n\t\t\t\t\treturn foundChild;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t};\n\n\t$.fn.tree.defaults = {\n\t\t/*\n\t\t * A static data representation of your full tree data. If you do not override the tree's\n\t\t * default dataSource method, this will just make the tree work out of the box without\n\t\t * you having to bring your own dataSource.\n\t\t *\n\t\t * Array of Objects representing tree branches (folder) and leaves (item):\n\t\t\t[\n\t\t\t\t{\n\t\t\t\t\tname: '',\n\t\t\t\t\ttype: 'folder',\n\t\t\t\t\tattr: {\n\t\t\t\t\t\tid: ''\n\t\t\t\t\t},\n\t\t\t\t\tchildren: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tname: '',\n\t\t\t\t\t\t\ttype: 'item',\n\t\t\t\t\t\t\tattr: {\n\t\t\t\t\t\t\t\tid: '',\n\t\t\t\t\t\t\t\t'data-icon': 'glyphicon glyphicon-file'\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tname: '',\n\t\t\t\t\ttype: 'item',\n\t\t\t\t\tattr: {\n\t\t\t\t\t\tid: '',\n\t\t\t\t\t\t'data-icon': 'glyphicon glyphicon-file'\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t];\n\t\t */\n\t\tstaticData: [],\n\t\t/*\n\t\t * If you set the full tree data on options.staticData, you can use this default dataSource\n\t\t * to consume that data. This allows you to just pass in a JSON array representation\n\t\t * of your full tree data and the tree will just work out of the box.\n\t\t */\n\t\tdataSource: function staticDataSourceConsumer (openedParentData, callback) {\n\t\t\tif (this.staticData.length > 0) {\n\t\t\t\tvar childData = findChildData(openedParentData, this.staticData);\n\n\t\t\t\tcallback({\n\t\t\t\t\tdata: childData\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\tmultiSelect: false,\n\t\tcacheItems: true,\n\t\tfolderSelect: true,\n\t\titemSelect: true,\n\t\t/*\n\t\t* How many times `discloseAll` should be called before a stopping and firing\n\t\t* an `exceededDisclosuresLimit` event. You can force it to continue by\n\t\t* listening for this event, setting `ignore-disclosures-limit` to `true` and\n\t\t* starting `discloseAll` back up again. This lets you make more decisions\n\t\t* about if/when/how/why/how many times `discloseAll` will be started back\n\t\t* up after it exceeds the limit.\n\t\t*\n\t\t*    $tree.one('exceededDisclosuresLimit.fu.tree', function () {\n\t\t*        $tree.data('ignore-disclosures-limit', true);\n\t\t*        $tree.tree('discloseAll');\n\t\t*    });\n\t\t*\n\t\t* `disclusuresUpperLimit` defaults to `0`, so by default this trigger\n\t\t* will never fire. The true hard the upper limit is the browser's\n\t\t* ability to load new items (i.e. it will keep loading until the browser\n\t\t* falls over and dies). On the Fuel UX `index.html` page, the point at\n\t\t* which the page became super slow (enough to seem almost unresponsive)\n\t\t* was `4`, meaning 256 folders had been opened, and 1024 were attempting to open.\n\t\t*/\n\t\tdisclosuresUpperLimit: 0\n\t};\n\n\t$.fn.tree.Constructor = Tree;\n\n\t$.fn.tree.noConflict = function noConflict () {\n\t\t$.fn.tree = old;\n\t\treturn this;\n\t};\n\n\treturn $.fn.tree;\n});\n"]}