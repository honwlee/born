{"version":3,"sources":["infinite-scroll.js"],"names":["define","langx","browser","eventer","noder","geom","velm","$","old","fn","infinitescroll","InfiniteScroll","element","options","this","$element","addClass","mixin","defaults","curScrollTop","scrollTop","curPercentage","getPercentage","fetchingData","on","proxy","onScroll","prototype","constructor","destroy","remove","empty","outerHTML","disable","off","enable","end","content","append","height","css","outerHeight","scrollHeight","get","fetchData","force","moreBtn","load","self","fetch","helpers","percentage","$loader","loader","dataSource","resp","undefined","hybrid","label","e","option","methodReturn","args","Array","slice","call","arguments","$set","each","$this","data","apply","Constructor","noConflict"],"mappings":"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","file":"../infinite-scroll.js","sourcesContent":["define([\n  \"skylark-utils/langx\",\n  \"skylark-utils/browser\",\n  \"skylark-utils/eventer\",\n  \"skylark-utils/noder\",\n  \"skylark-utils/geom\",\n  \"skylark-utils/velm\",\n  \"skylark-utils/query\"\n],function(langx,browser,eventer,noder,geom,velm,$){\n\n\t/*\n\t * Fuel UX Checkbox\n\t * https://github.com/ExactTarget/fuelux\n\t *\n\t * Copyright (c) 2014 ExactTarget\n\t * Licensed under the BSD New license.\n\t */\n\n\tvar old = $.fn.infinitescroll;\n\n\t// INFINITE SCROLL CONSTRUCTOR AND PROTOTYPE\n\n\tvar InfiniteScroll = function (element, options) {\n\t\tthis.$element = $(element);\n\t\tthis.$element.addClass('infinitescroll');\n\t\tthis.options = langx.mixin({}, $.fn.infinitescroll.defaults, options);\n\n\t\tthis.curScrollTop = this.$element.scrollTop();\n\t\tthis.curPercentage = this.getPercentage();\n\t\tthis.fetchingData = false;\n\n\t\tthis.$element.on('scroll.fu.infinitescroll', langx.proxy(this.onScroll, this));\n\t\tthis.onScroll();\n\t};\n\n\tInfiniteScroll.prototype = {\n\n\t\tconstructor: InfiniteScroll,\n\n\t\tdestroy: function () {\n\t\t\tthis.$element.remove();\n\t\t\t// any external bindings\n\t\t\t// [none]\n\n\t\t\t// empty elements to return to original markup\n\t\t\tthis.$element.empty();\n\n\t\t\treturn this.$element[0].outerHTML;\n\t\t},\n\n\t\tdisable: function () {\n\t\t\tthis.$element.off('scroll.fu.infinitescroll');\n\t\t},\n\n\t\tenable: function () {\n\t\t\tthis.$element.on('scroll.fu.infinitescroll', langx.proxy(this.onScroll, this));\n\t\t},\n\n\t\tend: function (content) {\n\t\t\tvar end = $('<div class=\"infinitescroll-end\"></div>');\n\t\t\tif (content) {\n\t\t\t\tend.append(content);\n\t\t\t} else {\n\t\t\t\tend.append('---------');\n\t\t\t}\n\n\t\t\tthis.$element.append(end);\n\t\t\tthis.disable();\n\t\t},\n\n\t\tgetPercentage: function () {\n\t\t\tvar height = (this.$element.css('box-sizing') === 'border-box') ? this.$element.outerHeight() : this.$element.height();\n\t\t\tvar scrollHeight = this.$element.get(0).scrollHeight;\n\t\t\treturn (scrollHeight > height) ? ((height / (scrollHeight - this.curScrollTop)) * 100) : 0;\n\t\t},\n\n\t\tfetchData: function (force) {\n\t\t\tvar load = $('<div class=\"infinitescroll-load\"></div>');\n\t\t\tvar self = this;\n\t\t\tvar moreBtn;\n\n\t\t\tvar fetch = function () {\n\t\t\t\tvar helpers = {\n\t\t\t\t\tpercentage: self.curPercentage,\n\t\t\t\t\tscrollTop: self.curScrollTop\n\t\t\t\t};\n\t\t\t\tvar $loader = $('<div class=\"loader\"></div>');\n\t\t\t\tload.append($loader);\n\t\t\t\t$loader.loader();\n\t\t\t\tif (self.options.dataSource) {\n\t\t\t\t\tself.options.dataSource(helpers, function (resp) {\n\t\t\t\t\t\tvar end;\n\t\t\t\t\t\tload.remove();\n\t\t\t\t\t\tif (resp.content) {\n\t\t\t\t\t\t\tself.$element.append(resp.content);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (resp.end) {\n\t\t\t\t\t\t\tend = (resp.end !== true) ? resp.end : undefined;\n\t\t\t\t\t\t\tself.end(end);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tself.fetchingData = false;\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tthis.fetchingData = true;\n\t\t\tthis.$element.append(load);\n\t\t\tif (this.options.hybrid && force !== true) {\n\t\t\t\tmoreBtn = $('<button type=\"button\" class=\"btn btn-primary\"></button>');\n\t\t\t\tif (typeof this.options.hybrid === 'object') {\n\t\t\t\t\tmoreBtn.append(this.options.hybrid.label);\n\t\t\t\t} else {\n\t\t\t\t\tmoreBtn.append('<span class=\"glyphicon glyphicon-repeat\"></span>');\n\t\t\t\t}\n\n\t\t\t\tmoreBtn.on('click.fu.infinitescroll', function () {\n\t\t\t\t\tmoreBtn.remove();\n\t\t\t\t\tfetch();\n\t\t\t\t});\n\t\t\t\tload.append(moreBtn);\n\t\t\t} else {\n\t\t\t\tfetch();\n\t\t\t}\n\t\t},\n\n\t\tonScroll: function (e) {\n\t\t\tthis.curScrollTop = this.$element.scrollTop();\n\t\t\tthis.curPercentage = this.getPercentage();\n\t\t\tif (!this.fetchingData && this.curPercentage >= this.options.percentage) {\n\t\t\t\tthis.fetchData();\n\t\t\t}\n\t\t}\n\t};\n\n\t// INFINITE SCROLL PLUGIN DEFINITION\n\n\t$.fn.infinitescroll = function (option) {\n\t\tvar args = Array.prototype.slice.call(arguments, 1);\n\t\tvar methodReturn;\n\n\t\tvar $set = this.each(function () {\n\t\t\tvar $this = $(this);\n\t\t\tvar data = $this.data('fu.infinitescroll');\n\t\t\tvar options = typeof option === 'object' && option;\n\n\t\t\tif (!data) {\n\t\t\t\t$this.data('fu.infinitescroll', (data = new InfiniteScroll(this, options)));\n\t\t\t}\n\n\t\t\tif (typeof option === 'string') {\n\t\t\t\tmethodReturn = data[option].apply(data, args);\n\t\t\t}\n\t\t});\n\n\t\treturn (methodReturn === undefined) ? $set : methodReturn;\n\t};\n\n\t$.fn.infinitescroll.defaults = {\n\t\tdataSource: null,\n\t\thybrid: false,//can be true or an object with structure: { 'label': (markup or jQuery obj) }\n\t\tpercentage: 95//percentage scrolled to the bottom before more is loaded\n\t};\n\n\t$.fn.infinitescroll.Constructor = InfiniteScroll;\n\n\t$.fn.infinitescroll.noConflict = function () {\n\t\t$.fn.infinitescroll = old;\n\t\treturn this;\n\t};\n\n});\n"]}